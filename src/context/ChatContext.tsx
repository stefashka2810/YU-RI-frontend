'use client'
import { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import chatService from '@/services/chat.service';
import { Chat } from '@/types/chat.types';
import { handleApiError } from '@/utils/error.utils';

interface ChatContextType {
    chats: Chat[];
    currentChat: Chat | null;
    isLoading: boolean;
    error: string | null;
    createNewChat: (title: string) => Promise<Chat | null>;
    loadChats: () => Promise<void>;
    selectChat: (chatId: number) => Promise<void>;
    sendMessage: (content: string, chatId?: number) => Promise<void>;
    generateAiResponse: (chatId?: number) => Promise<void>;
    parsePdf: (file: File) => Promise<string | null>;
    setCurrentChat: (chat: Chat | null) => void;
    clearError: () => void;
}

const ChatContext = createContext<ChatContextType | undefined>(undefined);

export const ChatProvider = ({ children }: { children: ReactNode }) => {
    const [chats, setChats] = useState<Chat[]>([]);
    const [currentChat, setCurrentChat] = useState<Chat | null>(null);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    const loadChats = async () => {
        try {
            setIsLoading(true);
            const chatsList = await chatService.getChats();
            setChats(chatsList);
        } catch (err) {
            const errorMessage = handleApiError(err);
            setError(errorMessage);
        } finally {
            setIsLoading(false);
        }
    };

    // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç
    const createNewChat = async (title: string): Promise<Chat | null> => {
        try {
            setIsLoading(true);
            const newChat = await chatService.createChat(title);
            setChats(prev => [newChat, ...prev]);
            setCurrentChat(newChat);
            return newChat;
        } catch (err) {
            const errorMessage = handleApiError(err);
            setError(errorMessage);
            return null;
        } finally {
            setIsLoading(false);
        }
    };

    // –í—ã–±—Ä–∞—Ç—å —á–∞—Ç (–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)
    const selectChat = async (chatId: number) => {
        try {
            setIsLoading(true);
            const chat = await chatService.getChat(chatId);
            setCurrentChat(chat);
        } catch (err) {
            const errorMessage = handleApiError(err);
            setError(errorMessage);
        } finally {
            setIsLoading(false);
        }
    };

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    const sendMessage = async (content: string, chatId?: number) => {
        const targetChatId = chatId || currentChat?.id;

        if (!targetChatId) {
            setError('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞');
            return;
        }

        try {
            setIsLoading(true);
            
            console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', content);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userMessage = await chatService.postMessage(targetChatId, content);
            
            console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', userMessage);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            setCurrentChat(prev => {
                if (!prev || prev.id !== targetChatId) return prev;
                return {
                    ...prev,
                    messages: [...(prev.messages || []), userMessage]
                };
            });

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ò–ò (–º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            try {
                await generateAiResponse(targetChatId);
            } catch (err) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ:', err);
                // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            }

        } catch (err) {
            const errorMessage = handleApiError(err);
            setError(errorMessage);
            setIsLoading(false);
        }
    };

    // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –ò–ò
    const generateAiResponse = async (chatId?: number) => {
        const targetChatId = chatId || currentChat?.id;

        if (!targetChatId) {
            setError('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞');
            return;
        }

        try {
            console.log('ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò –¥–ª—è —á–∞—Ç–∞:', targetChatId);
            console.log('üìù –¢–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ:', currentChat?.messages);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ò–ò
            const aiMessage = await chatService.generateAiResponse(targetChatId);
            
            console.log('‚úÖ –û—Ç–≤–µ—Ç –ò–ò –ø–æ–ª—É—á–µ–Ω:', aiMessage);
            console.log('üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞:', aiMessage.content);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –æ—à–∏–±–∫–æ–π
            if (aiMessage.content.includes('–Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å') || 
                aiMessage.content.includes('—Å–ª—É–∂–±–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')) {
                console.warn('‚ö†Ô∏è –ù–µ–π—Ä–æ—Å–µ—Ç—å –≤–µ—Ä–Ω—É–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', aiMessage.content);
                setError(`–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${aiMessage.content}`);
                return;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç —Å –æ—Ç–≤–µ—Ç–æ–º –ò–ò
            setCurrentChat(prev => {
                if (!prev || prev.id !== targetChatId) return prev;
                return {
                    ...prev,
                    messages: [...(prev.messages || []), aiMessage]
                };
            });

        } catch (err: unknown) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò:', err);
            
            const errorMessage = handleApiError(err);
            setError(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: ${errorMessage}`);
        } finally {
            setIsLoading(false);
        }
    };

    // –ü–∞—Ä—Å–∏–Ω–≥ PDF
    const parsePdf = async (file: File): Promise<string | null> => {
        try {
            setIsLoading(true);
            const result = await chatService.parsePdf(file);
            return result.text || null;
        } catch (err) {
            const errorMessage = handleApiError(err);
            setError(errorMessage);
            return null;
        } finally {
            setIsLoading(false);
        }
    };

    const clearError = () => setError(null);

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        loadChats();
    }, []);

    const value: ChatContextType = {
        chats,
        currentChat,
        isLoading,
        error,
        createNewChat,
        loadChats,
        selectChat,
        sendMessage,
        generateAiResponse,
        parsePdf,
        setCurrentChat,
        clearError,
    };

    return <ChatContext.Provider value={value}>{children}</ChatContext.Provider>;
};

export const useChat = () => {
    const context = useContext(ChatContext);
    if (context === undefined) {
        throw new Error('useChat must be used within a ChatProvider');
    }
    return context;
};

